{"version":3,"sources":["../../../src/renderer/ansi/ansi-terminal.js"],"names":["AnsiRenderer","constructor","escapeSequence","ansiModifiers","reset","bold","dim","underline","italic","inverse","ansiColorCodes","black","red","green","yellow","blue","magenta","cyan","white","gray","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","ansi","_generateAnsiEscapeSequences","modifiers","codes","result","key","start","end","out","string","color","bgColor","modifier","ansiString","process","stdout","write","cursorPosition","line","column","cursorUp","lines","cursorDown","cursorForward","columns","cursorBackward","clearScreen","erase","saveCursor","restoreCursor","renderMainScreen","viewModel","config","matrix","width","height","rows","nextBlock","nextBlocks","isGameOver","score","level","renderMatrix","startX","startY","x","y","backgroundSymbols","frontColor","backgroundColor","row","symbols","renderGameStatistic","renderNextBlock","i","blockConfig","length"],"mappings":"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","file":"ansi-terminal.js","sourcesContent":["/**\n * AnsiRenderer - ascii/ansi terminal renderer,\n * using VT-100/ANSI control escape sequences for terminal cursor hopping and colors\n * http://ascii-table.com/ansi-escape-sequences-vt-100.php\n *\n * @class AnsiRenderer\n */\nclass AnsiRenderer {\n    constructor() {\n        this.escapeSequence = '\\u001b[';\n\n        this.ansiModifiers = {\n            reset: [0, 0],\n            bold: [1, 22],\n            dim: [2, 22],\n            underline: [4, 24],\n            italic: [3, 23],\n            inverse: [7, 27],\n        };\n\n        this.ansiColorCodes = {\n            black: [30, 39],\n            red: [31, 39],\n            green: [32, 39],\n            yellow: [33, 39],\n            blue: [34, 39],\n            magenta: [35, 39],\n            cyan: [36, 39],\n            white: [37, 39],\n            gray: [90, 39],\n\n            bgBlack: [40, 49],\n            bgRed: [41, 49],\n            bgGreen: [42, 49],\n            bgYellow: [43, 49],\n            bgBlue: [44, 49],\n            bgMagenta: [45, 49],\n            bgCyan: [46, 49],\n            bgWhite: [47, 49],\n        };\n\n        this.ansi = this._generateAnsiEscapeSequences(this.ansiColorCodes);\n        this.modifiers = this._generateAnsiEscapeSequences(this.ansiModifiers);\n    }\n\n    _generateAnsiEscapeSequences(codes) {\n        let result = [];\n        for (let key in codes) {\n            result[key] = {};\n            result[key].start = this.escapeSequence + codes[key][0] + 'm';\n            result[key].end = this.escapeSequence + codes[key][1] + 'm';\n        }\n        return result;\n    }\n\n    /**\n     * Output to console ansi colored string\n     *\n     * @param string - output string\n     * @param color - black, red, green, yellow, blue, magenta, cyan, white, gray\n     * @param bgColor [bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite]\n     * @param modifier [bold, dim, underline, italic, inverse]\n     */\n    out(string, color, bgColor, modifier) {\n        let ansiString = this.ansi[color].start + string + this.ansi[color].end;\n        if (bgColor) {\n            ansiString = this.ansi[bgColor].start + ansiString + this.ansi[bgColor].end;\n        }\n        if (modifier) {\n            ansiString = this.modifiers[modifier].start + ansiString + this.modifiers[modifier].end;\n        }\n        process.stdout.write(ansiString);\n    }\n\n    /**\n     * Position the Cursor: \\033[<L>;<C>H or \\033[<L>;<C>f (puts the cursor at line L and column C)\n     *\n     * @param line\n     * @param column\n     */\n    cursorPosition(line, column) {\n        process.stdout.write(`${this.escapeSequence}${line};${column}H`);\n    }\n\n    /**\n     * Move the cursor up N lines: \\033[<N>A\n     *\n     * @param lines\n     */\n    cursorUp(lines) {\n        process.stdout.write(`${this.escapeSequence}${lines}A`);\n    }\n\n    /**\n     * Move the cursor down N lines: \\033[<N>B\n     *\n     * @param lines\n     */\n    cursorDown(lines) {\n        process.stdout.write(`${this.escapeSequence}${lines}B`);\n    }\n\n    /**\n     * Move the cursor forward N columns: \\033[<N>C\n     *\n     * @param columns\n     */\n    cursorForward(columns) {\n        process.stdout.write(`${this.escapeSequence}${columns}C`);\n    }\n\n    /**\n     * Move the cursor backward N columns: \\033[<N>D\n     *\n     * @param columns\n     */\n    cursorBackward(columns) {\n        process.stdout.write(`${this.escapeSequence}${columns}D`);\n    }\n\n    /**\n     * Clear the screen, move to (0,0): \\033[2J\n     *\n     */\n    clearScreen() {\n        process.stdout.write(`${this.escapeSequence}2J`);\n    }\n\n    /**\n     * Erase to end of line: \\033[K\n     *\n     */\n    erase() {\n        process.stdout.write(`${this.escapeSequence}K`);\n    }\n\n    /**\n     * Save cursor position: \\033[s\n     *\n     */\n    saveCursor() {\n        process.stdout.write(`${this.escapeSequence}s`);\n    }\n\n    /**\n     * Restore cursor position: \\033[u\n     *\n     */\n    restoreCursor() {\n        process.stdout.write(`${this.escapeSequence}u`);\n    }\n\n    /**\n     * Render main game screen with matrix and blocks\n     *\n     * @param viewModel\n     */\n    renderMainScreen(viewModel, config) {\n        const matrix = viewModel.matrix;\n        const width = config.matrix.columns;\n        const height = config.matrix.rows;\n        const nextBlock = viewModel.nextBlocks;\n        const isGameOver = viewModel.isGameOver;\n        const score = viewModel.score;\n        const level = viewModel.level;\n        const lines = viewModel.lines;\n\n        const renderMatrix = (matrix, startX, startY) => {\n            let x = startX; // column\n            let y = startY; // row\n            const backgroundSymbols = config.matrix.backgroundSymbols;\n            const frontColor = config.matrix.frontColor;\n            const backgroundColor = config.matrix.backgroundColor;\n\n            for (const row of matrix) {\n                this.cursorPosition(y, x);\n                for (const column of row) {\n                    if (column === 0) {\n                        this.out(backgroundSymbols, frontColor, backgroundColor);\n                    } else {\n                        this.out(column.symbols, column.frontColor, column.backgroundColor);\n                    }\n                    x++;\n                }\n                x = startX;\n                y++;\n            }\n        };\n\n        const renderGameStatistic = (startX, startY) => {\n            let x = startX; // column\n            let y = startY; // row\n\n            this.cursorPosition(y, x);\n            this.out('Score: ', 'red', 'bgBlack');\n            this.out(score, 'red', 'bgBlack', 'bold');\n            this.cursorPosition(y + 1, x);\n            this.out('Level: ', 'green', 'bgBlack');\n            this.out(level, 'green', 'bgBlack', 'bold');\n            this.cursorPosition(y + 2, x);\n            this.out('Lines: ', 'blue', 'bgBlack');\n            this.out(lines, 'blue', 'bgBlack', 'bold');\n        };\n\n        const renderNextBlock = (startX, startY) => {\n            this.cursorPosition(startY, startX);\n            this.out('Next Block: ', 'yellow', 'bgBlack', 'bold');\n\n            for (let i = 0; i < 4; i++) {\n                this.cursorPosition(i + startY + 2, startX + 2);\n                this.out('        ', 'bgBlack', 'bgBlack');\n            }\n\n            for (let y = 0; y < nextBlock.blockConfig.length; y++) {\n                this.cursorPosition(startY + y + 2, startX + 2);\n                for (let x = 0; x < nextBlock.blockConfig[0].length; x++) {\n                    if (nextBlock.blockConfig[y][x] === 1) {\n                        this.out(nextBlock.symbols, nextBlock.frontColor, nextBlock.backgroundColor);\n                    } else {\n                        this.out('  ', 'bgBlack', 'bgBlack');\n                    }\n                }\n            }\n        };\n\n        const startX = 3;\n        const startY = 3;\n\n        renderMatrix(matrix, startX, startY);\n        renderGameStatistic(startX + 2 + width * 2, startY + 2);\n        renderNextBlock(startX + 2 + width * 2, startY + 6);\n\n        this.cursorPosition(startY + height + 1, 0);\n    }\n}\n\nexport default AnsiRenderer;\n"]}