{"version":3,"sources":["../../src/src/game.js"],"names":["Game","constructor","config","matrix","score","points","lines","_matrix","topOut","activeBlocks","nextBlocks","updateBlocks","moveBlocksDown","Blocks","getRandom","x","Math","floor","columns","width","hasCollision","updateMatrix","placeBlocks","updateScore","clearedLines","clearLines","level","y","rows","block","setActiveBlocks","blocks","placeActiveBlocks","moveBlocksLeft","moveLeft","moveRight","moveBlocksRight","moveDown","moveUp","rotateBlocks","tempBlockConfig","blockConfig","map","row","rotateBlockConfig"],"mappings":"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","file":"game.js","sourcesContent":["import Blocks from './blocks';\n\n/**\n * Game - main game logic class\n *\n * @class Game\n */\nclass Game {\n    constructor(config, matrix) {\n        this.config = config;\n        this.score = config.score;\n        this.points = config.points;\n        this.lines = config.lines;\n        this._matrix = matrix;\n        this.topOut = false;\n        this.activeBlocks = null;\n        this.nextBlocks = null;\n\n        this.updateBlocks();\n        this.moveBlocksDown();\n    }\n\n    updateBlocks() {\n        this.activeBlocks = this.nextBlocks ? this.nextBlocks : Blocks.getRandom(this.config, 0, 0);\n        this.nextBlocks = Blocks.getRandom(this.config, 0, 0);\n        this.activeBlocks.x = Math.floor((this._matrix.columns - this.activeBlocks.width) / 2);\n        // this.activeBlocks.y = -1;\n\n        if (this._matrix.hasCollision(this.activeBlocks)) {\n            this.topOut = true;\n        }\n    }\n\n    updateMatrix() {\n        this._matrix.placeBlocks(this.activeBlocks);\n    }\n\n    updateScore() {\n        const clearedLines = this._matrix.clearLines();\n        if (clearedLines > 0) {\n            this.score += Game.points[clearedLines] * (this.level + 1);\n            this.lines += clearedLines;\n        }\n    }\n\n    get level() {\n        return Math.floor(this.lines * 0.1);\n    }\n\n    get matrix() {\n        const matrix = [];\n\n        for (let y = 0; y < this._matrix.rows; y++) {\n            matrix[y] = [];\n            for (let x = 0; x < this._matrix.columns; x++) {\n                matrix[y][x] = this._matrix[y][x];\n            }\n        }\n\n        for (let block of this.activeBlocks) {\n            if (block && block.y > -1 && block.x > -1) {\n                matrix[block.y][block.x] = block;\n            }\n        }\n\n        return matrix;\n    }\n\n    setActiveBlocks(blocks) {\n        this.activeBlocks = blocks;\n    }\n\n    placeActiveBlocks() {\n        this._matrix.placeBlocks(this.activeBlocks);\n    }\n\n    moveBlocksLeft() {\n        this.activeBlocks.moveLeft();\n\n        if (this._matrix.hasCollision(this.activeBlocks)) {\n            this.activeBlocks.moveRight();\n        }\n    }\n\n    moveBlocksRight() {\n        this.activeBlocks.moveRight();\n\n        if (this._matrix.hasCollision(this.activeBlocks)) {\n            this.activeBlocks.moveLeft();\n        }\n    }\n\n    moveBlocksDown() {\n        if (this.topOut) return;\n\n        this.activeBlocks.moveDown();\n\n        if (this._matrix.hasCollision(this.activeBlocks)) {\n            this.activeBlocks.moveUp();\n            this.updateMatrix();\n            this.updateScore();\n            this.updateBlocks();\n        }\n    }\n\n    rotateBlocks() {\n        const tempBlockConfig = this.activeBlocks.blockConfig.map(row => [...row]);\n        this.activeBlocks.rotateBlockConfig();\n\n        if (this._matrix.hasCollision(this.activeBlocks)) {\n            this.activeBlocks.blockConfig = tempBlockConfig;\n        }\n    }\n}\n\nexport default Game;\n"]}