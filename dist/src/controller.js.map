{"version":3,"sources":["../../src/src/controller.js"],"names":["Controller","constructor","game","renderer","config","isPlaying","interval","update","bind","startTimer","handleKeyboard","key","name","pause","play","rotateBlocks","updateRender","moveBlocksDown","moveBlocksLeft","moveBlocksRight","viewModel","matrix","nextBlocks","isGameOver","topOut","score","level","lines","stopTimer","renderMainScreen","speed","setInterval","clearInterval"],"mappings":";;;;;AAAA;;;;;AAKA,MAAMA,UAAN,CAAiB;AACbC,gBAAYC,IAAZ,EAAkBC,QAAlB,EAA4BC,MAA5B,EAAoC;AAChC,aAAKF,IAAL,GAAYA,IAAZ;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,SAAL,GAAiB,KAAjB;AACA,aAAKC,QAAL,GAAgB,IAAhB;;AAEA,aAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,aAAKC,UAAL;AACA;AACH;;AAEDC,mBAAeC,GAAf,EAAoB;AAChB,gBAAOA,IAAIC,IAAX;AACI,iBAAK,QAAL;AACI,oBAAI,KAAKP,SAAT,EAAoB;AAChB,yBAAKQ,KAAL;AACH,iBAFD,MAEO;AACH,yBAAKC,IAAL;AACH;AACD;AACJ,iBAAK,IAAL;AACI,qBAAKZ,IAAL,CAAUa,YAAV;AACA,qBAAKC,YAAL;AACA;AACJ,iBAAK,MAAL;AACI,qBAAKd,IAAL,CAAUe,cAAV;AACA,qBAAKD,YAAL;AACA;AACJ,iBAAK,MAAL;AACI,qBAAKd,IAAL,CAAUgB,cAAV;AACA,qBAAKF,YAAL;AACA;AACJ,iBAAK,OAAL;AACI,qBAAKd,IAAL,CAAUiB,eAAV;AACA,qBAAKH,YAAL;AACA;AAvBR;AAyBH;;AAED,QAAII,SAAJ,GAAgB;AACZ,cAAMlB,OAAO,KAAKA,IAAlB;;AAEA,eAAO;AACHmB,oBAAQnB,KAAKmB,MADV;AAEHC,wBAAYpB,KAAKoB,UAFd;AAGHC,wBAAYrB,KAAKsB,MAHd;AAIHC,mBAAOvB,KAAKuB,KAJT;AAKHC,mBAAOxB,KAAKwB,KALT;AAMHC,mBAAOzB,KAAKyB;AANT,SAAP;AAQH;;AAEDpB,aAAS;AACL,aAAKL,IAAL,CAAUe,cAAV;AACA,aAAKD,YAAL;AACH;;AAEDF,WAAO;AACH,aAAKT,SAAL,GAAiB,IAAjB;AACA,aAAKI,UAAL;AACA,aAAKO,YAAL;AACH;;AAEDH,YAAQ;AACJ,aAAKR,SAAL,GAAiB,KAAjB;AACA,aAAKuB,SAAL;AACA,aAAKZ,YAAL;AACH;;AAEDA,mBAAe;AACX,cAAMI,YAAY,KAAKA,SAAvB;AACA,aAAKjB,QAAL,CAAc0B,gBAAd,CAA+BT,SAA/B,EAA0C,KAAKhB,MAA/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDK,iBAAa;AACT,cAAMqB,QAAQ,OAAO,KAAK5B,IAAL,CAAUwB,KAAV,GAAkB,GAAvC;;AAEA,YAAI,CAAC,KAAKpB,QAAV,EAAoB;AAChB,iBAAKA,QAAL,GAAgByB,YAAY,MAAM;AAC9B,qBAAKxB,MAAL;AACH,aAFe,EAEbuB,QAAQ,CAAR,GAAYA,KAAZ,GAAoB,GAFP,CAAhB;AAGH;AACJ;;AAEDF,gBAAY;AACR,YAAI,KAAKtB,QAAT,EAAmB;AACf0B,0BAAc,KAAK1B,QAAnB;AACA,iBAAKA,QAAL,GAAgB,IAAhB;AACH;AACJ;AAnGY;;kBAsGFN,U","file":"controller.js","sourcesContent":["/**\n * Controller - handle keyboard pressing and control main game loop\n *\n * @class Controller\n */\nclass Controller {\n    constructor(game, renderer, config) {\n        this.game = game;\n        this.renderer = renderer;\n        this.config = config;\n        this.isPlaying = false;\n        this.interval = null;\n\n        this.update = this.update.bind(this);\n        this.startTimer();\n        // this.renderer.renderStartScreen();\n    }\n\n    handleKeyboard(key) {\n        switch(key.name) {\n            case 'return':\n                if (this.isPlaying) {\n                    this.pause();\n                } else {\n                    this.play();\n                }\n                break;\n            case 'up':\n                this.game.rotateBlocks();\n                this.updateRender();\n                break;\n            case 'down':\n                this.game.moveBlocksDown();\n                this.updateRender();\n                break;\n            case 'left':\n                this.game.moveBlocksLeft();\n                this.updateRender();\n                break;\n            case 'right':\n                this.game.moveBlocksRight();\n                this.updateRender();\n                break;\n        }\n    }\n\n    get viewModel() {\n        const game = this.game;\n\n        return {\n            matrix: game.matrix,\n            nextBlocks: game.nextBlocks,\n            isGameOver: game.topOut,\n            score: game.score,\n            level: game.level,\n            lines: game.lines\n        };\n    }\n\n    update() {\n        this.game.moveBlocksDown();\n        this.updateRender();\n    }\n\n    play() {\n        this.isPlaying = true;\n        this.startTimer();\n        this.updateRender();\n    }\n\n    pause() {\n        this.isPlaying = false;\n        this.stopTimer();\n        this.updateRender();\n    }\n\n    updateRender() {\n        const viewModel = this.viewModel;\n        this.renderer.renderMainScreen(viewModel, this.config);\n\n        // if (viewModel.isGameOver) {\n        //     this.renderer.renderEndScreen(viewModel);\n        // } else if (!this._isPlaying) {\n        //     this.renderer.renderPauseScreen(viewModel);\n        // } else {\n        //     this.renderer.renderMainScreen(viewModel);\n        // }\n    }\n\n    startTimer() {\n        const speed = 1000 - this.game.level * 100;\n\n        if (!this.interval) {\n            this.interval = setInterval(() => {\n                this.update()\n            }, speed > 0 ? speed : 100);\n        }\n    }\n\n    stopTimer() {\n        if (this.interval) {\n            clearInterval(this.interval);\n            this.interval = null;\n        }\n    }\n}\n\nexport default Controller;\n"]}