{"version":3,"sources":["../../src/src/blocks.js"],"names":["Blocks","constructor","config","x","y","type","symbols","frontColor","backgroundColor","blockConfig","Symbol","iterator","length","getRandom","types","classicTypes","index","Math","floor","random","pieceTypes","moveLeft","moveRight","moveUp","moveDown","width","height","rotateBlockConfig","matrix","matrixSize","layer","first","last","i","offset","top"],"mappings":"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","file":"blocks.js","sourcesContent":["/**\n * Blocks - universal tetris tetrominoes (tetriminoes, piece) class\n * https://tetris.fandom.com/wiki/Piece\n *\n * @class Blocks\n */\nclass Blocks {\n    constructor(config, x , y) {\n        this.type = config.type;\n        this.symbols = config.symbols;\n        this.frontColor = config.frontColor;\n        this.backgroundColor = config.backgroundColor;\n        this.blockConfig = config.blockConfig;\n        this.x = x;\n        this.y = y;\n    }\n\n    *[Symbol.iterator]() {\n        for (let y = 0; y < this.blockConfig.length; y++) {\n            for (let x = 0; x < this.blockConfig[y].length; x++) {\n                yield this.blockConfig[y][x] ? {\n                    y: this.y + y,\n                    x: this.x + x,\n                    symbols: this.symbols,\n                    frontColor: this.frontColor,\n                    backgroundColor: this.backgroundColor\n                } : null;\n            }\n        }\n    }\n\n    static getRandom(config, x ,y) {\n        const types = config.classicTypes;\n        const index = Math.floor(Math.random() * types.length);\n        const type = types[index];\n        return new Blocks(config.pieceTypes[type], x, y);\n    }\n\n    moveLeft() {\n        this.x -=1;\n    }\n\n    moveRight() {\n        this.x +=1;\n    }\n\n    moveUp() {\n        this.y -=1;\n    }\n\n    moveDown() {\n        this.y +=1;\n    }\n\n    get width() {\n        return this.blockConfig[0].length;\n    }\n\n    get height() {\n        return this.blockConfig.length;\n    }\n\n    rotateBlockConfig() {\n        const matrix = this.blockConfig;\n        const matrixSize = matrix.length;\n        const x = Math.floor(matrixSize / 2);\n        const y = matrixSize - 1;\n\n        for (let layer = 0; layer < x; ++layer) {\n            let first = layer;\n            let last = y - layer;\n            for(let i = first; i < last; ++i) {\n                let offset = i - first;\n                 // save top\n                let top = matrix[first][i];\n                // left -> top\n                matrix[first][i] = matrix[last-offset][first];\n                // bottom -> left\n                matrix[last-offset][first] = matrix[last][last - offset];\n                // right -> bottom\n                matrix[last][last - offset] = matrix[i][last];\n                // top -> right\n                matrix[i][last] = top; // right <- saved top\n            }\n        }\n    }\n}\n\nexport default Blocks;\n"]}